# -*- coding: utf-8 -*-
"""Análise_desafio_py_grupo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h7sJgcmk4-lvRcsSghi_o_oSxVq7kHhe
"""

#https://www.kaggle.com/competitions/titanic
#https://medium.com/@alegeorgelustosa/an%C3%A1lise-explorat%C3%B3ria-e-preditiva-do-dataset-titanic-em-python-fbd5e5bb7328

import pandas as pd
import matplotlib.pyplot as plt

"""# **DESAFIO 1**

Definição do problema: Dado o código do dataset retorne as seguintes
informações:
1. Importe o dataset utilizando a seguinte função do pydataset:
data(“Código”)
2. Imprimir na tela o dataset;
3. Informe o tipo de dados retornado pela função data;
4. Informe o número de exemplos (linhas) e características (colunas) do
dataset.
5. Crie uma função que ao receber um DataFrame retorna o
número de linhas e colunas.
"""

!pip install pydataset
#https://discord.com/channels/997547002755813457/1181638907276841071/1204226421485080626
import pydataset
from pydataset import data
#importando datasets públicos

plantTraits = data("plantTraits")
plantTraits.head()


type(data)
#plantTraits.shape

def retornarCols (dataset):
  return dataset.shape


retornarCols(plantTraits)

#imprime todo o dataframe
plantTraits

"""# **DESAFIO 2**

Definição do problema: Dada a tabela com a média de altura e
peso de mulheres estadunidenses, onde os nomes das colunas
estão em inglês height (altura) e weight (peso) e seus
respectivos valores estão nas seguintes unidades: polegada e
libras.
1. Construa uma nova representação onde os nomes das colunas
estão em português, e os valores de altura são convertidos para
centímetros e os valores de peso convertidos para quilograma.
2. Plote o scatterplot de altura x peso da nova representação
"""

women = data('women')
women= women.rename(columns={'height': 'altura', 'weight':'peso'})
#women_ajustado = women['altura'] * 2.54, women['peso'] * 0.45
women.head()
women['altura'] = women['altura'] * 2.54
women['peso'] = women['peso']*0.45
women.head()
#women_ajustado.head()
#women.info()
women.plot.scatter(x='altura' , y='peso')

"""# **DESAFIO 3**

Definição do problema:Dado que você está trabalhando com um grupo
de historiadores que estão analisando o naufrágio do Titanic, informe
aos historiadores as seguintes questões?
1. Quantas pessoas sobreviveram e quantas morreram?
2. Quantas pessoas eram da primeira, segunda e terceira classe?
3. Qual a porcentagem de sobreviventes na primeira classe?
4. Qual a porcentagem de mortos da terceira classe?
"""

import pandas as pd
#from google.colab import drive
#drive.mount('/content/drive')

#df = pd.read_csv('titanic.csv')
#df.head()

#df = df.rename(columns={'Pclass': 'Classe'})#mudar nome colunas

#df.head()
#df['Pclass'].unique()
#df.info()
#df['Age'].unique()
#df1 = df[['Survived', 'Pclass']]
#df1
titanic = data('titanic')
titanic.head()
titanic.info()
#Verificar as opções na coluna survived
titanic['survived'].unique()
titanic['survived'].value_counts() # no-817  // yes - 499
titanic['class'].unique()# '1st class', '2nd class', '3rd class']
titanic['class'].value_counts()# 3rd class -706//1st class - 325//2nd class-285
titanic_primeira_sobreviventes = titanic[(titanic['survived'] == 'yes') & (titanic['class'] == '1st class')].count
titanic_primeira_sobreviventes #203
titanic_terceira_mortos = titanic[(titanic['survived'] == 'no') & (titanic['class'] == '3rd class')].count
titanic_terceira_mortos#528

df.shape #linhas, colunas
df.columns
df['Survived'].unique()
df['Survived'].value_counts()#0-false-549; 1-true-342 - questão 1
df['Pclass'].unique()
df['Pclass'].value_counts()# 3  -  491/1-    216/2    184- questão 2
filtro1=  df[(df['Survived'] == 1) & (df['Pclass'] == 1)].count
#filtro1=  df[(df['Survived'] == 1) & (df['Pclass'] == 1)].count()
filtro1
df.isna()
df['Survived'].isna().unique()
#df.dtypes #tipos dos dados nas cols

filtro2=  df[(df['Survived'] == 0) & (df['Pclass'] == 2)].count #questão 4  --97
filtro2
filtro1

df.shape #linhas, colunas
df.columns
df['Survived'].unique()
df['Survived'].value_counts()#0-false-549; 1-true-342 - questão 1
df['Pclass'].unique()
df['Pclass'].value_counts()# 3  -  491/1-    216/2    184- questão 2
filtro1=  df[(df['Survived'] == 1) & (df['Pclass'] == 1)].count
#filtro1=  df[(df['Survived'] == 1) & (df['Pclass'] == 1)].count()
filtro1
df.isna()
df['Survived'].isna().unique()
#df.dtypes #tipos dos dados nas cols

filtro2=  df[(df['Survived'] == 0) & (df['Pclass'] == 2)].count #questão 4  --97
filtro2
filtro1

"""# **DESAFIO 4**

Definição do problema: Dado que você está trabalhando numa
emissora de televisão, o narrador precisa informar o jogo com o maior
número de gols na história da Bundesliga (Campeonato Alemão).
Você precisa fazer uma busca em todos os jogos da história deste
campeonato e verificar qual jogo é esse e passar a iformação ao
narrador, para posteriormente, o narrador informar aos
telespectadores.
1. Verificar os jogos com maior quantidade de gols na história da
Bundesliga
2. Informar a data, os times participantes e o placar do jogo
"""

bundesliga = data("Bundesliga")
bundesliga.head(3)
bundesliga_total_partida= bundesliga['HomeGoals'] + bundesliga['AwayGoals']
bundesliga_total_partida.sort_values()
#maiores_placares = bundesliga_total_partida == 12
maiores_placares = bundesliga_total_partida[bundesliga_total_partida == 12].count()  #5
maiores_placares
#bundesliga_total_partida.head()
bundesliga_total_partida= bundesliga['HomeGoals'] + bundesliga['AwayGoals']
x =bundesliga_total_partida.sort_values(ascending=False)
x.head(10)

"""# **DESAFIO 5**

Definição do problema: Você está trabalhando em um jornal e o
editor quer que você responda as seguintes questões:
1. Qual a empresa mais valiosa da lista da Forbes 2000?
2. Construa uma tabela com as TOP 10 empresas mais lucrativas da
lista.
3. Qual a média de valores de empresa das cinco categorias mais
valiosas?
"""

forbes2000 = data("Forbes2000")
forbes2000.head(3)
forbes = forbes2000.sort_values(by='marketvalue',ascending=False)
forbes #General Eletric
#10 mais
forbes_10_mais = forbes.head(10)
forbes_10_mais

forbes_5_mais = forbes.head(5)
forbes_5_mais
forbes_5_mais['marketvalue'].mean()#286,63